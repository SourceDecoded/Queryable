{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","exports","queryable","ok","where","expBuilder","property","isEqualTo","query","getQuery","equal","children","nodeName","value","expressionBuilder","expression","throws","orderBy","length","include","take","skip","or","and","orderByDesc","testParameters","test1","test2","setParameters","deepEqual","parameters","withParameters","queryable1","queryable2","merge","provider","toArrayAsync","Promise","resolve","then","countAsync","toArrayWithCountAsync","testType","test","ofType","type","copiedQueryable","copy"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;AACA;;;;;;;;AAEAC,QAAQ,yBAAR,IAAqC,YAAY;AAC7C,QAAMC,YAAY,yBAAlB;AACAF,WAAOG,EAAP,CAAU,IAAV;AACH,CAHD;;AAKAF,QAAQ,mDAAR,IAA+D,YAAY;AACvE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UAAUE,KAAV,CAAgB,sBAAc;AACtC,eAAOC,WAAWC,QAAX,CAAoB,WAApB,EAAiCC,SAAjC,CAA2C,OAA3C,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAMC,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAAlD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAA1E;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCE,KAA1D;AACH,CAXD;;AAaAZ,QAAQ,kDAAR,IAA8D,YAAY;AACtE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UACPE,KADO,CACD,sBAAc;AACjB,eAAOC,WAAWC,QAAX,CAAoB,WAApB,EAAiCC,SAAjC,CAA2C,OAA3C,CAAP;AACH,KAHO,EAIPH,KAJO,CAID,sBAAc;AACjB,eAAOC,WAAWC,QAAX,CAAoB,UAApB,EAAgCC,SAAhC,CAA0C,QAA1C,CAAP;AACH,KANO,CAAZ;;AAQA,QAAMC,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,KAAb,EAAoBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAA5C;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCC,QAA9D;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDA,QAAhD,CAAyD,CAAzD,EAA4DE,KAAtF;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAtE;AACAb,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCC,QAA9D;AACAZ,WAAOU,KAAP,CAAa,UAAb,EAAyBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDA,QAAhD,CAAyD,CAAzD,EAA4DE,KAArF;AACAb,WAAOU,KAAP,CAAa,QAAb,EAAuBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAvE;AACH,CAnBD;;AAqBAZ,QAAQ,6EAAR,IAAyF,YAAY;AACjG,QAAMa,oBAAoB,iCAA1B;AACA,QAAMC,aAAaD,kBAAkBR,QAAlB,CAA2B,WAA3B,EAAwCC,SAAxC,CAAkD,OAAlD,CAAnB;AACA,QAAIL,YAAY,yBAAhB;AACAA,gBAAYA,UAAUE,KAAV,CAAgBW,UAAhB,CAAZ;;AAEA,QAAMP,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAAlD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAA1E;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCE,KAA1D;AACH,CAXD;;AAaAZ,QAAQ,qFAAR,IAAiG,YAAY;AACzG,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAUE,KAAV,EAAZ;AACH,KAFD;AAGH,CAND;;AAQAH,QAAQ,qDAAR,IAAiE,YAAY;AACzE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UAAUe,OAAV,CAAkB,sBAAc;AACxC,eAAOZ,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAME,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BC,QAApD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA5E;AACH,CAVD;;AAYAZ,QAAQ,oDAAR,IAAgE,YAAY;AACxE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UACPe,OADO,CACC,sBAAc;AACnB,eAAOZ,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAHO,EAIPW,OAJO,CAIC,sBAAc;AACnB,eAAOZ,WAAWC,QAAX,CAAoB,UAApB,CAAP;AACH,KANO,CAAZ;;AAQA,QAAME,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BC,QAApD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA5E;AACAb,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BC,QAApD;AACAZ,WAAOU,KAAP,CAAa,UAAb,EAAyBF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA3E;AACH,CAhBD;;AAkBAZ,QAAQ,+EAAR,IAA2F,YAAY;AACnG,QAAMa,oBAAoB,iCAA1B;AACA,QAAMC,aAAaD,kBAAkBR,QAAlB,CAA2B,WAA3B,CAAnB;AACA,QAAIJ,YAAY,yBAAhB;AACAA,gBAAYA,UAAUe,OAAV,CAAkBF,UAAlB,CAAZ;;AAEA,QAAMP,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BC,QAApD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA5E;AACH,CAVD;;AAYAZ,QAAQ,qFAAR,IAAiG,YAAY;AACzG,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UACPe,OADO,CACC,sBAAc;AACnB,eAAOZ,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAHO,EAIPW,OAJO,CAIC,sBAAc;AACnB,eAAOZ,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KANO,CAAZ;;AAQA,QAAME,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,CAAb,EAAgBF,MAAMS,OAAN,CAAcN,QAAd,CAAuBO,MAAvC;AACH,CAbD;;AAeAjB,QAAQ,uFAAR,IAAmG,YAAY;AAC3G,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAUe,OAAV,EAAZ;AACH,KAFD;AAGH,CAND;;AAQAhB,QAAQ,qDAAR,IAAiE,YAAY;AACzE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UAAUiB,OAAV,CAAkB,UAAlB,CAAZ;;AAEA,QAAMX,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,gBAAb,EAA+BF,MAAMW,OAAN,CAAcR,QAAd,CAAuB,CAAvB,EAA0BC,QAAzD;AACAZ,WAAOU,KAAP,CAAa,UAAb,EAAyBF,MAAMW,OAAN,CAAcR,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCE,KAA/D;AACH,CARD;;AAUAZ,QAAQ,oDAAR,IAAgE,YAAY;AACxE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UACPiB,OADO,CACC,aADD,EAEPA,OAFO,CAEC,aAFD,CAAZ;;AAIA,QAAMX,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,gBAAb,EAA+BF,MAAMW,OAAN,CAAcR,QAAd,CAAuB,CAAvB,EAA0BC,QAAzD;AACAZ,WAAOU,KAAP,CAAa,aAAb,EAA4BF,MAAMW,OAAN,CAAcR,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCE,KAAlE;AACAb,WAAOU,KAAP,CAAa,gBAAb,EAA+BF,MAAMW,OAAN,CAAcR,QAAd,CAAuB,CAAvB,EAA0BC,QAAzD;AACAZ,WAAOU,KAAP,CAAa,aAAb,EAA4BF,MAAMW,OAAN,CAAcR,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCE,KAAlE;AACH,CAZD;;AAcAZ,QAAQ,uFAAR,IAAmG,YAAY;AAC3G,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAUiB,OAAV,EAAZ;AACH,KAFD;AAGH,CAND;;AAQAlB,QAAQ,4DAAR,IAAwE,YAAY;AAChF,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UAAUkB,IAAV,CAAe,EAAf,CAAZ;;AAEA,QAAMZ,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,EAAb,EAAiBF,MAAMY,IAAN,CAAWP,KAA5B;AACH,CAPD;;AASAZ,QAAQ,4DAAR,IAAwE,YAAY;AAChF,QAAIC,YAAY,yBAAhB;AACAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAUkB,IAAV,EAAZ;AACH,KAFD;AAGH,CALD;;AAOAnB,QAAQ,4DAAR,IAAwE,YAAY;AAChF,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UAAUmB,IAAV,CAAe,EAAf,CAAZ;;AAEA,QAAMb,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,EAAb,EAAiBF,MAAMa,IAAN,CAAWR,KAA5B;AACH,CAPD;;AASAZ,QAAQ,4DAAR,IAAwE,YAAY;AAChF,QAAIC,YAAY,yBAAhB;AACAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAUmB,IAAV,EAAZ;AACH,KAFD;AAGH,CALD;;AAOApB,QAAQ,gDAAR,IAA4D,YAAY;AACpE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UAAUoB,EAAV,CAAa,sBAAc;AACnC,eAAOjB,WAAWC,QAAX,CAAoB,WAApB,EAAiCC,SAAjC,CAA2C,OAA3C,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAMC,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAAlD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAA1E;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCE,KAA1D;AACH,CAXD;;AAaAZ,QAAQ,+CAAR,IAA2D,YAAY;AACnE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UACPoB,EADO,CACJ,sBAAc;AACd,eAAOjB,WAAWC,QAAX,CAAoB,WAApB,EAAiCC,SAAjC,CAA2C,OAA3C,CAAP;AACH,KAHO,EAIPe,EAJO,CAIJ,sBAAc;AACd,eAAOjB,WAAWC,QAAX,CAAoB,UAApB,EAAgCC,SAAhC,CAA0C,QAA1C,CAAP;AACH,KANO,CAAZ;;AAQA,QAAMC,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,IAAb,EAAmBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAA3C;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCC,QAA9D;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDA,QAAhD,CAAyD,CAAzD,EAA4DE,KAAtF;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAtE;AACAb,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCC,QAA9D;AACAZ,WAAOU,KAAP,CAAa,UAAb,EAAyBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDA,QAAhD,CAAyD,CAAzD,EAA4DE,KAArF;AACAb,WAAOU,KAAP,CAAa,QAAb,EAAuBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAvE;AACH,CAnBD;;AAqBAZ,QAAQ,0EAAR,IAAsF,YAAY;AAC9F,QAAMa,oBAAoB,iCAA1B;AACA,QAAMC,aAAaD,kBAAkBR,QAAlB,CAA2B,WAA3B,EAAwCC,SAAxC,CAAkD,OAAlD,CAAnB;AACA,QAAIL,YAAY,yBAAhB;AACAA,gBAAYA,UAAUoB,EAAV,CAAaP,UAAb,CAAZ;;AAEA,QAAMP,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAAlD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAA1E;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCE,KAA1D;AACH,CAXD;;AAaAZ,QAAQ,kFAAR,IAA8F,YAAY;AACtG,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAUoB,EAAV,EAAZ;AACH,KAFD;AAGH,CAND;;AAQArB,QAAQ,iDAAR,IAA6D,YAAY;AACrE,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UAAUqB,GAAV,CAAc,sBAAc;AACpC,eAAOlB,WAAWC,QAAX,CAAoB,WAApB,EAAiCC,SAAjC,CAA2C,OAA3C,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAMC,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAAlD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAA1E;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCE,KAA1D;AACH,CAXD;;AAaAZ,QAAQ,yDAAR,IAAqE,YAAY;AAC7E,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UAAUsB,WAAV,CAAsB,sBAAc;AAC5C,eAAOnB,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAME,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,YAAb,EAA2BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BC,QAArD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA5E;AACH,CAVD;;AAYAZ,QAAQ,wDAAR,IAAoE,YAAY;AAC5E,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UACPsB,WADO,CACK,sBAAc;AACvB,eAAOnB,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAHO,EAIPkB,WAJO,CAIK,sBAAc;AACvB,eAAOnB,WAAWC,QAAX,CAAoB,UAApB,CAAP;AACH,KANO,CAAZ;;AAQA,QAAME,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,YAAb,EAA2BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BC,QAArD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA5E;AACAb,WAAOU,KAAP,CAAa,YAAb,EAA2BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BC,QAArD;AACAZ,WAAOU,KAAP,CAAa,UAAb,EAAyBF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA3E;AACH,CAhBD;;AAkBAZ,QAAQ,mFAAR,IAA+F,YAAY;AACvG,QAAMa,oBAAoB,iCAA1B;AACA,QAAMC,aAAaD,kBAAkBR,QAAlB,CAA2B,WAA3B,CAAnB;AACA,QAAIJ,YAAY,yBAAhB;AACAA,gBAAYA,UAAUsB,WAAV,CAAsBT,UAAtB,CAAZ;;AAEA,QAAMP,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,YAAb,EAA2BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BC,QAArD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA5E;AACH,CAVD;;AAYAZ,QAAQ,yFAAR,IAAqG,YAAY;AAC7G,QAAIC,YAAY,yBAAhB;AACAA,gBAAYA,UACPsB,WADO,CACK,sBAAc;AACvB,eAAOnB,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAHO,EAIPkB,WAJO,CAIK,sBAAc;AACvB,eAAOnB,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KANO,CAAZ;;AAQA,QAAME,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAOU,KAAP,CAAa,CAAb,EAAgBF,MAAMS,OAAN,CAAcN,QAAd,CAAuBO,MAAvC;AACH,CAbD;;AAeAjB,QAAQ,2FAAR,IAAuG,YAAY;AAC/G,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAUsB,WAAV,EAAZ;AACH,KAFD;AAGH,CAND;;AAQAvB,QAAQ,kEAAR,IAA8E,YAAY;AACtF,QAAIC,YAAY,yBAAhB;AACA,QAAMuB,iBAAiB,EAAEC,OAAO,CAAT,EAAYC,OAAO,CAAnB,EAAvB;AACAzB,gBAAYA,UAAU0B,aAAV,CAAwBH,cAAxB,CAAZ;;AAEA,QAAMjB,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAO6B,SAAP,CAAiBJ,cAAjB,EAAiCjB,MAAMsB,UAAvC;AACH,CARD;;AAUA7B,QAAQ,6EAAR,IAAyF,YAAY;AACjG,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAU0B,aAAV,EAAZ;AACH,KAFD;AAGH,CAND;;AAQA3B,QAAQ,mEAAR,IAA+E,YAAY;AACvF,QAAIC,YAAY,yBAAhB;AACA,QAAMuB,iBAAiB,EAAEC,OAAO,CAAT,EAAYC,OAAO,CAAnB,EAAvB;AACAzB,gBAAYA,UAAU6B,cAAV,CAAyBN,cAAzB,CAAZ;;AAEA,QAAMjB,QAAQN,UAAUO,QAAV,EAAd;;AAEAT,WAAO6B,SAAP,CAAiBJ,cAAjB,EAAiCjB,MAAMsB,UAAvC;AACH,CARD;;AAUA7B,QAAQ,8EAAR,IAA0F,YAAY;AAClG,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAU6B,cAAV,EAAZ;AACH,KAFD;AAGH,CAND;;AAQA9B,QAAQ,uEAAR,IAAmF,YAAY;AAC3F,QAAI+B,aAAa,yBAAjB;AACA,QAAIC,aAAa,yBAAjB;AACAA,iBAAaA,WAAWC,KAAX,CAAiBF,UAAjB,CAAb;;AAEA,QAAMxB,QAAQyB,WAAWxB,QAAX,EAAd;;AAEAT,WAAOU,KAAP,CAAa,CAAb,EAAgBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqBO,MAArC;AACH,CARD;;AAUAjB,QAAQ,4FAAR,IAAwG,YAAY;AAChH,QAAI+B,aAAa,yBAAjB;AACA,QAAIC,aAAa,yBAAjB;;AAEAD,iBAAaA,WAAW5B,KAAX,CAAiB,sBAAc;AACxC,eAAOC,WAAWC,QAAX,CAAoB,WAApB,EAAiCC,SAAjC,CAA2C,OAA3C,CAAP;AACH,KAFY,CAAb;AAGA0B,iBAAaA,WAAWC,KAAX,CAAiBF,UAAjB,CAAb;;AAEA,QAAMxB,QAAQyB,WAAWxB,QAAX,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAAlD;AACAZ,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAA1E;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCE,KAA1D;AACH,CAdD;;AAgBAZ,QAAQ,4FAAR,IAAwG,YAAY;AAChH,QAAI+B,aAAa,yBAAjB;AACA,QAAIC,aAAa,yBAAjB;;AAEAD,iBAAaA,WAAW5B,KAAX,CAAiB,sBAAc;AACxC,eAAOC,WAAWC,QAAX,CAAoB,WAApB,EAAiCC,SAAjC,CAA2C,OAA3C,CAAP;AACH,KAFY,CAAb;AAGA0B,iBAAaA,WACR7B,KADQ,CACF,sBAAc;AACjB,eAAOC,WAAWC,QAAX,CAAoB,UAApB,EAAgCC,SAAhC,CAA0C,QAA1C,CAAP;AACH,KAHQ,EAIR2B,KAJQ,CAIFF,UAJE,CAAb;;AAMA,QAAMxB,QAAQyB,WAAWxB,QAAX,EAAd;;AAEAT,WAAOU,KAAP,CAAa,KAAb,EAAoBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAA5C;AACAZ,WAAOU,KAAP,CAAa,QAAb,EAAuBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAvE;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAtE;AACH,CAlBD;;AAoBAZ,QAAQ,6FAAR,IAAyG,YAAY;AACjH,QAAI+B,aAAa,yBAAjB;AACA,QAAIC,aAAa,yBAAjB;;AAEAD,iBAAaA,WAAW5B,KAAX,CAAiB,sBAAc;AACxC,eAAOC,WAAWC,QAAX,CAAoB,WAApB,EAAiCC,SAAjC,CAA2C,OAA3C,CAAP;AACH,KAFY,CAAb;AAGA0B,iBAAaA,WACR7B,KADQ,CACF,sBAAc;AACjB,eAAOC,WAAWC,QAAX,CAAoB,UAApB,EAAgCC,SAAhC,CAA0C,QAA1C,CAAP;AACH,KAHQ,EAIRH,KAJQ,CAIF,sBAAc;AACjB,eAAOC,WAAWC,QAAX,CAAoB,KAApB,EAA2BC,SAA3B,CAAqC,EAArC,CAAP;AACH,KANQ,EAOR2B,KAPQ,CAOFF,UAPE,CAAb;;AASA,QAAMxB,QAAQyB,WAAWxB,QAAX,EAAd;;AAEAT,WAAOU,KAAP,CAAa,KAAb,EAAoBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBC,QAA5C;AACAZ,WAAOU,KAAP,CAAa,QAAb,EAAuBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAvE;AACAb,WAAOU,KAAP,CAAa,EAAb,EAAiBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAjE;AACAb,WAAOU,KAAP,CAAa,OAAb,EAAsBF,MAAMJ,KAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,EAAoCA,QAApC,CAA6C,CAA7C,EAAgDE,KAAtE;AACH,CAtBD;;AAwBAZ,QAAQ,wFAAR,IAAoG,YAAY;AAC5G,QAAI+B,aAAa,yBAAjB;AACA,QAAIC,aAAa,yBAAjB;;AAEAD,iBAAaA,WAAWb,OAAX,CAAmB,UAAnB,CAAb;AACAc,iBAAaA,WAAWC,KAAX,CAAiBF,UAAjB,CAAb;;AAEA,QAAMxB,QAAQyB,WAAWxB,QAAX,EAAd;;AAEAT,WAAOU,KAAP,CAAa,UAAb,EAAyBF,MAAMW,OAAN,CAAcR,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCE,KAA/D;AACH,CAVD;;AAYAZ,QAAQ,wFAAR,IAAoG,YAAY;AAC5G,QAAI+B,aAAa,yBAAjB;AACA,QAAIC,aAAa,yBAAjB;;AAEAD,iBAAaA,WAAWf,OAAX,CAAmB,sBAAc;AAC1C,eAAOZ,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAFY,CAAb;AAGA2B,iBAAaA,WAAWC,KAAX,CAAiBF,UAAjB,CAAb;;AAEA,QAAMxB,QAAQyB,WAAWxB,QAAX,EAAd;;AAEAT,WAAOU,KAAP,CAAa,WAAb,EAA0BF,MAAMS,OAAN,CAAcN,QAAd,CAAuB,CAAvB,EAA0BA,QAA1B,CAAmC,CAAnC,EAAsCA,QAAtC,CAA+C,CAA/C,EAAkDE,KAA5E;AACH,CAZD;;AAcAZ,QAAQ,mHAAR,IAA+H,YAAY;AACvI,QAAI+B,aAAa,yBAAjB;AACA,QAAIC,aAAa,yBAAjB;;AAEAD,iBAAaA,WAAWf,OAAX,CAAmB,sBAAc;AAC1C,eAAOZ,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAFY,CAAb;AAGA2B,iBAAaA,WACRhB,OADQ,CACA,sBAAc;AACnB,eAAOZ,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAHQ,EAIR4B,KAJQ,CAIFF,UAJE,CAAb;;AAMA,QAAMxB,QAAQyB,WAAWxB,QAAX,EAAd;;AAEAT,WAAOU,KAAP,CAAa,CAAb,EAAgBF,MAAMS,OAAN,CAAcN,QAAd,CAAuBO,MAAvC;AACH,CAhBD;;AAkBAjB,QAAQ,sEAAR,IAAkF,YAAY;AAC1F,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,oBAAYA,UAAUgC,KAAV,EAAZ;AACH,KAFD;AAGH,CAND;;AAQAjC,QAAQ,kDAAR,IAA8D,YAAY;AACtE,QAAIC,YAAY,yBAAhB;AACAA,cAAUiC,QAAV,GAAqB,EAAEC,cAAc;AAAA,mBAAMC,QAAQC,OAAR,CAAgB,EAAhB,CAAN;AAAA,SAAhB,EAArB;;AAEApC,cAAUkC,YAAV,GAAyBG,IAAzB,CAA8B,YAAM;AAChCvC,eAAOG,EAAP,CAAU,IAAV;AACH,KAFD;AAGH,CAPD;;AASAF,QAAQ,sEAAR,IAAkF,YAAY;AAC1F,QAAIC,YAAY,yBAAhB;;AAEAF,WAAOgB,MAAP,CAAc,YAAM;AAChBd,kBAAUkC,YAAV;AACH,KAFD;AAGH,CAND;;AAQAnC,QAAQ,gDAAR,IAA4D,YAAY;AACpE,QAAIC,YAAY,yBAAhB;AACAA,cAAUiC,QAAV,GAAqB,EAAEK,YAAY;AAAA,mBAAaH,QAAQC,OAAR,EAAb;AAAA,SAAd,EAArB;;AAEApC,cAAUsC,UAAV,GAAuBD,IAAvB,CAA4B,YAAM;AAC9BvC,eAAOG,EAAP,CAAU,IAAV;AACH,KAFD;AAGH,CAPD;;AASAF,QAAQ,2DAAR,IAAuE,YAAY;AAC/E,QAAIC,YAAY,yBAAhB;AACAA,cAAUiC,QAAV,GAAqB,EAAEM,uBAAuB;AAAA,mBAAaJ,QAAQC,OAAR,EAAb;AAAA,SAAzB,EAArB;;AAEApC,cAAUuC,qBAAV,GAAkCF,IAAlC,CAAuC,YAAM;AACzCvC,eAAOG,EAAP,CAAU,IAAV;AACH,KAFD;AAGH,CAPD;;AASAF,QAAQ,4CAAR,IAAwD,YAAY;AAChE,QAAIC,YAAY,yBAAhB;AACA,QAAMwC,WAAW,EAAEC,MAAM,MAAR,EAAjB;AACAzC,gBAAYA,UAAU0C,MAAV,CAAiBF,QAAjB,CAAZ;AACA1C,WAAO6B,SAAP,CAAiB3B,UAAU2C,IAA3B,EAAiCH,QAAjC;AACH,CALD;;AAOAzC,QAAQ,4CAAR,IAAwD,YAAY;AAChE,QAAIC,YAAY,yBAAhB;AACA,QAAMwC,WAAW,EAAEC,MAAM,MAAR,EAAjB;AACAzC,gBAAYA,UAAU0C,MAAV,CAAiBF,QAAjB,CAAZ;AACA1C,WAAO6B,SAAP,CAAiB3B,UAAU2C,IAA3B,EAAiCH,QAAjC;AACH,CALD;;AAOAzC,QAAQ,0CAAR,IAAsD,YAAY;AAC9D,QAAIC,YAAY,yBAAhB;AACA,QAAI4C,kBAAkB5C,UAAU6C,IAAV,EAAtB;;AAEA/C,WAAO6B,SAAP,CAAiB3B,SAAjB,EAA4B4C,eAA5B;AACH,CALD","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\nimport Queryable from \"./../Queryable\";\nimport ExpressionBuilder from \"../ExpressionBuilder\";\n\nexports[\"Queryable: Constructor.\"] = function () {\n    const queryable = new Queryable();\n    assert.ok(true);\n};\n\nexports[\"Queryable: Constructor with query (where: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .where(expBuilder => {\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n        })\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    let queryable = new Queryable();\n    queryable = queryable.where(expression);\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.where();\n    });\n};\n\nexports[\"Queryable: Constructor with query (orderBy: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.orderBy(expBuilder => {\n        return expBuilder.property(\"firstName\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderBy(expBuilder => {\n            return expBuilder.property(\"firstName\");\n        })\n        .orderBy(expBuilder => {\n            return expBuilder.property(\"lastName\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\n    assert.equal(\"ascending\", query.orderBy.children[1].nodeName);\n    assert.equal(\"lastName\", query.orderBy.children[1].children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\");\n    let queryable = new Queryable();\n    queryable = queryable.orderBy(expression);\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: with the same expression called twice.)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderBy(expBuilder => {\n            return expBuilder.property(\"firstName\");\n        })\n        .orderBy(expBuilder => {\n            return expBuilder.property(\"firstName\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(1, query.orderBy.children.length);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.orderBy();\n    });\n};\n\nexports[\"Queryable: Constructor with query (include: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.include(\"property\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"propertyAccess\", query.include.children[0].nodeName);\n    assert.equal(\"property\", query.include.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (include: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .include(\"propertyOne\")\n        .include(\"propertyTwo\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"propertyAccess\", query.include.children[0].nodeName);\n    assert.equal(\"propertyOne\", query.include.children[0].children[1].value);\n    assert.equal(\"propertyAccess\", query.include.children[1].nodeName);\n    assert.equal(\"propertyTwo\", query.include.children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (include: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.include();\n    });\n};\n\nexports[\"Queryable: Constructor with query (take: value === number)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.take(10);\n\n    const query = queryable.getQuery();\n\n    assert.equal(10, query.take.value);\n};\n\nexports[\"Queryable: Constructor with query (take: value !== number)\"] = function () {\n    let queryable = new Queryable();\n    assert.throws(() => {\n        queryable = queryable.take();\n    });\n};\n\nexports[\"Queryable: Constructor with query (skip: value === number)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.skip(10);\n\n    const query = queryable.getQuery();\n\n    assert.equal(10, query.skip.value);\n};\n\nexports[\"Queryable: Constructor with query (skip: value !== number)\"] = function () {\n    let queryable = new Queryable();\n    assert.throws(() => {\n        queryable = queryable.skip();\n    });\n};\n\nexports[\"Queryable: Constructor with query (or: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.or(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .or(expBuilder => {\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n        })\n        .or(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"or\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    let queryable = new Queryable();\n    queryable = queryable.or(expression);\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.or();\n    });\n};\n\nexports[\"Queryable: Constructor with query (and: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.and(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.orderByDesc(expBuilder => {\n        return expBuilder.property(\"firstName\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderByDesc(expBuilder => {\n            return expBuilder.property(\"firstName\");\n        })\n        .orderByDesc(expBuilder => {\n            return expBuilder.property(\"lastName\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\n    assert.equal(\"descending\", query.orderBy.children[1].nodeName);\n    assert.equal(\"lastName\", query.orderBy.children[1].children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\");\n    let queryable = new Queryable();\n    queryable = queryable.orderByDesc(expression);\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: with the same expression called twice.)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderByDesc(expBuilder => {\n            return expBuilder.property(\"firstName\");\n        })\n        .orderByDesc(expBuilder => {\n            return expBuilder.property(\"firstName\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(1, query.orderBy.children.length);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.orderByDesc();\n    });\n};\n\nexports[\"Queryable: Constructor with query (setParameters: obj passed in)\"] = function () {\n    let queryable = new Queryable();\n    const testParameters = { test1: 1, test2: 2 };\n    queryable = queryable.setParameters(testParameters);\n\n    const query = queryable.getQuery();\n\n    assert.deepEqual(testParameters, query.parameters);\n};\n\nexports[\"Queryable: Constructor with query (setParameters: w/o parameters passed in)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.setParameters();\n    });\n};\n\nexports[\"Queryable: Constructor with query (withParameters: obj passed in)\"] = function () {\n    let queryable = new Queryable();\n    const testParameters = { test1: 1, test2: 2 };\n    queryable = queryable.withParameters(testParameters);\n\n    const query = queryable.getQuery();\n\n    assert.deepEqual(testParameters, query.parameters);\n};\n\nexports[\"Queryable: Constructor with query (withParameters: w/o parameters passed in)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.withParameters();\n    });\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable is empty)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(0, query.where.children.length);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging doesn't have anything to copy)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging has a single where expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        })\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging has a chained where expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        })\n        .where(expBuilder => {\n            return expBuilder.property(\"age\").isEqualTo(35);\n        })\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\n    assert.equal(35, query.where.children[0].children[1].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[2].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable has an include expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.include(\"property\");\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"property\", query.include.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable has an orderBy expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.orderBy(expBuilder => {\n        return expBuilder.property(\"firstName\");\n    });\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable has the same orderBy expression as queryable merging)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.orderBy(expBuilder => {\n        return expBuilder.property(\"firstName\");\n    });\n    queryable2 = queryable2\n        .orderBy(expBuilder => {\n            return expBuilder.property(\"firstName\");\n        })\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(1, query.orderBy.children.length);\n};\n\nexports[\"Queryable: Constructor with query (merge: w/o a queryable passed in)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.merge();\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { toArrayAsync: () => Promise.resolve([]) };\n\n    queryable.toArrayAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayAsync method called w/o provider.\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable.toArrayAsync();\n    });\n};\n\nexports[\"Queryable: Constructor with countAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { countAsync: queryable => Promise.resolve() };\n\n    queryable.countAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayWithCountAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { toArrayWithCountAsync: queryable => Promise.resolve() };\n\n    queryable.toArrayWithCountAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with ofType called.\"] = function () {\n    let queryable = new Queryable();\n    const testType = { test: \"test\" };\n    queryable = queryable.ofType(testType);\n    assert.deepEqual(queryable.type, testType);\n};\n\nexports[\"Queryable: Constructor with ofType called.\"] = function () {\n    let queryable = new Queryable();\n    const testType = { test: \"test\" };\n    queryable = queryable.ofType(testType);\n    assert.deepEqual(queryable.type, testType);\n};\n\nexports[\"Queryable: Constructor with copy called.\"] = function () {\n    let queryable = new Queryable();\n    let copiedQueryable = queryable.copy();\n\n    assert.deepEqual(queryable, copiedQueryable);\n};\n"]}