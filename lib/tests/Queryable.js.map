{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","exports","queryable","ok","where","expBuilder","property","isEqualTo","query","getQuery","equal","children","nodeName","value","and","or","expressionBuilder","expression","throws","orderBy","type","column","length","take","skip","orderByDesc","queryable1","queryable2","merge","provider","toArrayAsync","Promise","resolve","then","countAsync","toArrayWithCountAsync","copiedQueryable","copy","deepEqual","posts","members","select","isIn","one","two","json","toJson","fromJson","json2","innerQueryable"],"mappings":"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","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\nimport Queryable from \"./../Queryable\";\nimport ExpressionBuilder from \"../ExpressionBuilder\";\n\nexports[\"Queryable: Constructor.\"] = function () {\n    const queryable = new Queryable();\n    assert.ok(true);\n};\n\nexports[\"Queryable: Constructor with query (where: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .where(expBuilder => {\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n        })\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: expressionBuilder.and)\"] = function() {\n    let queryable = new Queryable();\n    queryable = queryable\n        .where(expBuilder => {\n            return expBuilder.and(\n                expBuilder.property(\"firstName\").isEqualTo(\"Jared\"),\n                expBuilder.property(\"lastName\").isEqualTo(\"Barnes\"));\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n}\n\nexports[\"Queryable: Constructor with query (where: expressionBuilder.or)\"] = function() {\n    let queryable = new Queryable();\n    queryable = queryable\n        .where(expBuilder => {\n            return expBuilder.or(\n                expBuilder.property(\"firstName\").isEqualTo(\"Jared\"),\n                expBuilder.property(\"lastName\").isEqualTo(\"Barnes\"));\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"or\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n}\n\nexports[\"Queryable: Constructor with query (where: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    let queryable = new Queryable();\n    queryable = queryable.where(expression);\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.where();\n    });\n};\n\nexports[\"Queryable: Constructor with query (orderBy: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.orderBy(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ASC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderBy(\"firstName\")\n        .orderBy(\"lastName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ASC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n    assert.equal(\"ASC\", query.orderBy[1].type);\n    assert.equal(\"lastName\", query.orderBy[1].column);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    let queryable = new Queryable();\n    queryable = queryable.orderBy(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ASC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: with the same expression called twice.)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderBy(\"firstName\")\n        .orderBy(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(1, query.orderBy.length);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.orderBy();\n    });\n};\n\nexports[\"Queryable: Constructor with query (take: value === number)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.take(10);\n\n    const query = queryable.getQuery();\n\n    assert.equal(10, query.take);\n};\n\nexports[\"Queryable: Constructor with query (take: value !== number)\"] = function () {\n    let queryable = new Queryable();\n    assert.throws(() => {\n        queryable = queryable.take();\n    });\n};\n\nexports[\"Queryable: Constructor with query (skip: value === number)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.skip(10);\n\n    const query = queryable.getQuery();\n\n    assert.equal(10, query.skip);\n};\n\nexports[\"Queryable: Constructor with query (skip: value !== number)\"] = function () {\n    let queryable = new Queryable();\n    assert.throws(() => {\n        queryable = queryable.skip();\n    });\n};\n\nexports[\"Queryable: Constructor with query (or: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.or(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .or(expBuilder => {\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n        })\n        .or(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"or\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    let queryable = new Queryable();\n    queryable = queryable.or(expression);\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.or();\n    });\n};\n\nexports[\"Queryable: Constructor with query (and: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.and(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.orderByDesc(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"DESC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderByDesc(\"firstName\")\n        .orderByDesc(\"lastName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"DESC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n    assert.equal(\"DESC\", query.orderBy[1].type);\n    assert.equal(\"lastName\", query.orderBy[1].column);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: with ExpressionBuilder instance.)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.orderByDesc(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"DESC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: with the same expression called twice.)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderByDesc(\"firstName\")\n        .orderByDesc(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(1, query.orderBy.length);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.orderByDesc();\n    });\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable is empty)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(0, query.where.children.length);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging doesn't have anything to copy)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging has a single where expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        })\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging has a chained where expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        })\n        .where(expBuilder => {\n            return expBuilder.property(\"age\").isEqualTo(35);\n        })\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\n    assert.equal(35, query.where.children[0].children[1].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[2].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable has an orderBy expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.orderBy(\"firstName\");\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable has the same orderBy expression as queryable merging)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.orderBy(\"firstName\");\n    queryable2 = queryable2\n        .orderBy(\"firstName\")\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(1, query.orderBy.length);\n};\n\nexports[\"Queryable: Constructor with query (merge: w/o a queryable passed in)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.merge();\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { toArrayAsync: () => Promise.resolve([]) };\n\n    queryable.toArrayAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayAsync method called w/o provider.\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable.toArrayAsync();\n    });\n};\n\nexports[\"Queryable: Constructor with countAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { countAsync: queryable => Promise.resolve() };\n\n    queryable.countAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayWithCountAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { toArrayWithCountAsync: queryable => Promise.resolve() };\n\n    queryable.toArrayWithCountAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with copy called.\"] = function () {\n    let queryable = new Queryable();\n    let copiedQueryable = queryable.copy();\n\n    assert.deepEqual(queryable, copiedQueryable);\n};\n\nexports[\"Queryable: IsIn with queryable.\"] = function () {\n    let posts = new Queryable(\"Post\");\n    let members = new Queryable(\"Member\").select([\"groupId\"]).where((expBuilder) => {\n        return expBuilder.property(\"userId\").isEqualTo(\"Bob\");\n    });\n\n    posts = posts.where((expBuilder) => {\n        return expBuilder.property(\"groupId\").isIn(members);\n    });\n\n    assert.equal(posts.query.where.children[0].children[1].value, members.getQuery());\n};\n\nexports[\"Queryable: Select, invalid arguments.\"] = function () {\n    let queryable = new Queryable();\n    assert.throws(() => {\n        queryable.select(\"bad\");\n    });\n};\n\nexports[\"Queryable: Select.\"] = function () {\n    let queryable = new Queryable().select({\n        \"one\": \"otherOne\",\n        \"two\": \"otherTwo\"\n    });\n\n    assert.equal(queryable.query.select.one, \"otherOne\");\n    assert.equal(queryable.query.select.two, \"otherTwo\");\n};\n\nexports[\"Queryable.toJson: Simple.\"] = function () {\n    let queryable = new Queryable(\"Source\").where((expBuilder) => {\n        return expBuilder.property(\"property\").isEqualTo(\"Value\");\n    });\n\n    let json = queryable.toJson();\n    let queryable2 = Queryable.fromJson(json);\n    let json2 = queryable2.toJson();\n\n    assert.equal(json, json2);\n}\n\nexports[\"Queryable.toJson: isIn with query.\"] = function () {\n    let innerQueryable = new Queryable(\"Target\").select([\"sourceId\"]).where((expBuilder) => {\n        return expBuilder.property(\"property\").isEqualTo(\"John\");\n    });\n\n    let queryable = new Queryable(\"Source\").select({\n        \"property1\": \"prop1\"\n    }).where((expBuilder) => {\n        return expBuilder.property(\"property\").isIn(innerQueryable);\n    }).orderBy(\"property1\").take(10).skip(15);\n\n    let json = queryable.toJson();\n    let queryable2 = Queryable.fromJson(json);\n    let json2 = queryable2.toJson();\n\n    assert.equal(json, json2);\n}"]}