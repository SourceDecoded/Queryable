{"version":3,"sources":["../../src/tests/ExpressionBuilder.js"],"names":["assert","exports","expressionBuilder","ok","expression","and","equal","nodeName","or","value","property","isEqualTo","children","isNotEqualTo","contains","testArray","isIn","deepEqual","throws","isNotIn","isGreaterThan","isGreaterThanOrEqualTo","isLessThan","isLessThanOrEqualTo","endsWith","startsWith","operationExpressionBuilder","getExpression","any","expBuilder","where","query","getLeftExpression","all"],"mappings":"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","file":"ExpressionBuilder.js","sourcesContent":["import * as assert from \"assert\";\nimport { ExpressionBuilder, OperationExpressionBuilder } from \"../ExpressionBuilder\";\n\nexports[\"ExpressionBuilder: Constructor.\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    assert.ok(true);\n};\n\nexports[\"ExpressionBuilder: Constructor with and.\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.and();\n\n    assert.equal(\"and\", expression.nodeName);\n};\n\nexports[\"ExpressionBuilder: Constructor with or.\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.or();\n\n    assert.equal(\"or\", expression.nodeName);\n};\n\nexports[\"ExpressionBuilder: Constructor with value.\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const value = expressionBuilder.value();\n    assert.ok(true);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isEqualTo).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n\n    assert.equal(\"equalTo\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isNotEqualTo).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isNotEqualTo(\"Jared\");\n\n    assert.equal(\"notEqualTo\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (contains).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").contains(\"Jared\");\n\n    assert.equal(\"substringOf\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isIn).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const testArray = [\"test\"];\n    const expression = expressionBuilder.property(\"firstName\").isIn(testArray);\n\n    assert.equal(\"isIn\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.deepEqual(testArray, expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isIn: w/o passing in Array).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n\n    assert.throws(() => {\n        expressionBuilder.property(\"firstName\").isIn(\"test\");\n    });\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isNotIn).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const testArray = [\"test\"];\n    const expression = expressionBuilder.property(\"firstName\").isNotIn(testArray);\n\n    assert.equal(\"isNotIn\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.deepEqual(testArray, expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isNotIn: w/o passing in Array).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n\n    assert.throws(() => {\n        expressionBuilder.property(\"firstName\").isNotIn(\"test\");\n    });\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isGreaterThan).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isGreaterThan(\"Jared\");\n\n    assert.equal(\"greaterThan\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isGreaterThanOrEqualTo).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isGreaterThanOrEqualTo(\"Jared\");\n\n    assert.equal(\"greaterThanOrEqualTo\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isLessThan).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isLessThan(\"Jared\");\n\n    assert.equal(\"lessThan\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isLessThanOrEqualTo).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isLessThanOrEqualTo(\"Jared\");\n\n    assert.equal(\"lessThanOrEqualTo\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (endsWith).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").endsWith(\"Jared\");\n\n    assert.equal(\"endsWith\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (startsWith).\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").startsWith(\"Jared\");\n\n    assert.equal(\"startsWith\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value);\n};\n\nexports[\"OperationExpressionBuilder: Constructor with getExpression.\"] = function() {\n    const operationExpressionBuilder = new OperationExpressionBuilder();\n    const expression = operationExpressionBuilder.getExpression();\n    assert.ok(true);\n};\n\nexports[\"OperationExpressionBuilder: Constructor with any.\"] = function() {\n    const operationExpressionBuilder = new OperationExpressionBuilder();\n    const expression = operationExpressionBuilder.any(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    assert.equal(\"any\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[1].value.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value.children[1].value);\n};\n\nexports[\"OperationExpressionBuilder: Constructor with where.\"] = function() {\n    const operationExpressionBuilder = new OperationExpressionBuilder();\n    const expression = operationExpressionBuilder.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = expression.getLeftExpression();\n\n    assert.equal(\"where\", query.children[1].value.nodeName);\n    assert.equal(\"firstName\", query.children[1].value.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.children[1].value.children[0].children[1].value);\n};\n\nexports[\"OperationExpressionBuilder: Constructor with all.\"] = function() {\n    const operationExpressionBuilder = new OperationExpressionBuilder();\n    const expression = operationExpressionBuilder.all(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    assert.equal(\"all\", expression.nodeName);\n    assert.equal(\"firstName\", expression.children[1].value.children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[1].value.children[1].value);\n};\n\nexports[\"OperationExpressionBuilder: Constructor with property.\"] = function() {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"propertyOne\").property(\"propertyTwo\").getExpression();\n\n    assert.equal(\"propertyTwo\", expression.children[1].value);\n};\n"]}