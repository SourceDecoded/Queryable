{"version":3,"sources":["../src/Queryable.js"],"names":["queryConverter","Queryable","type","query","provider","_applyQuery","where","nodeName","skip","take","Infinity","Array","isArray","orderBy","filter","_isValidOrderBy","_isValidMapping","select","Error","object","JSON","parse","stringify","copy","_cloneObject","lambda","_copyQuery","getQuery","whereExpression","wrapper","children","push","length","rightExpression","leftExpression","pop","expression","mapping","Object","keys","every","key","column","name","isNaN","parseInt","charAt","properties","hasValidMapping","property","_validatePropertyName","existingMapping","forEach","mappingKeys","_createQueryableFromLambda","queryable","_assertHasProvider","countAsync","cloneQuery","andExpression","index","findIndex","cloneOrderBy","_selectArray","_selectObject","value","toArrayAsync","toArrayWithCountAsync","jsonQuery","convert"],"mappings":"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","file":"Queryable.js","sourcesContent":["import Expression from \"./Expression\";\nimport ExpressionBuilder from \"./ExpressionBuilder\";\nimport OperationExpression from \"./OperationExpression\";\nimport OperationExpressionBuilder from \"./OperationExpressionBuilder\";\nimport ValueExpression from \"./ValueExpression\";\nimport QueryConverter from \"./QueryConverter\";\n\nconst queryConverter = new QueryConverter();\n\nexport default class Queryable {\n    constructor(type, query = {}) {\n        this.type = type || \"Object\";\n        this.provider = null;\n        this.query = query;\n        this._applyQuery(query);\n    }\n\n    _applyQuery(query) {\n        if (query.where != null && query.where.nodeName === \"where\") {\n            this.query.where = query.where;\n        } else {\n            this.query.where = new OperationExpression(\"where\");\n        }\n\n        if (typeof query.skip === \"number\") {\n            this.query.skip = query.skip;\n        } else {\n            this.query.skip = 0;\n        }\n\n        if (typeof query.take === \"number\") {\n            this.query.take = query.take;\n        } else {\n            this.query.take = Infinity;\n        }\n\n        if (Array.isArray(query.orderBy)) {\n            this.query.orderBy = query.orderBy.filter((orderBy) => {\n                return this._isValidOrderBy(orderBy);\n            });\n        } else {\n            this.query.orderBy = [];\n        }\n\n        if (this._isValidMapping(this.query.select)) {\n            this.query.select = query.select;\n        } else {\n            this.query.select = {};\n        }\n\n        this.query.type = this.type;\n\n    }\n\n    _assertHasProvider() {\n        if (!this.provider) {\n            throw new Error(\"No provider found.\");\n        }\n    }\n\n    _cloneObject(object) {\n        return JSON.parse(JSON.stringify(object));\n    }\n\n    _copyQuery(query) {\n        let copy = {};\n\n        copy.where = query.where.copy();\n        copy.orderBy = this._cloneObject(query.orderBy);\n        copy.select = this._cloneObject(query.select);\n        copy.take = query.take;\n        copy.skip = query.skip;\n        copy.type = query.type;\n\n        return copy;\n    }\n\n    _createQueryableFromLambda(type, lambda = () => { }) {\n        let query = this._copyQuery(this.getQuery());\n        let whereExpression;\n\n        if (typeof lambda === \"function\") {\n            whereExpression = lambda(new ExpressionBuilder(this.type));\n        } else if (lambda instanceof Expression) {\n            whereExpression = lambda;\n        } else {\n            throw new Error(\"Invalid Argument: Expected an expression, or function.\");\n        }\n\n        if (!(whereExpression instanceof Expression)) {\n            throw new Error(\"Invalid expression: You may be missing a return.\");\n        }\n\n        if (whereExpression.nodeName !== \"where\") {\n            let wrapper = new OperationExpression(\"where\");\n            wrapper.children.push(whereExpression);\n            whereExpression = wrapper;\n        }\n\n        if (query.where.children.length === 0) {\n            query.where = whereExpression;\n        } else {\n\n            let rightExpression = whereExpression.children[0];\n            let leftExpression = query.where.children.pop();\n            let expression = new OperationExpression(type);\n\n            expression.children.push(\n                leftExpression,\n                rightExpression\n            );\n\n            query.where.children.push(expression);\n        }\n\n        return this.copy(query);\n    }\n\n    _isValidMapping(mapping) {\n        if (mapping == null) {\n            return false;\n        }\n\n        return Object.keys(mapping).every((key) => {\n            return typeof key === \"string\" && typeof mapping[key] === \"string\";\n        });\n    }\n\n    _isValidOrderBy(orderBy) {\n        let keys = Object.keys(orderBy);\n\n        if (keys.length !== 2) {\n            return false;\n        }\n\n        if (orderBy.type !== \"ASC\" && orderBy.type !== \"DESC\") {\n            return false;\n        }\n\n        if (typeof orderBy.column !== \"string\") {\n            return false;\n        }\n\n        return true;\n    }\n\n    _validatePropertyName(name) {\n        return typeof name === \"string\" && name.length > 0 && isNaN(parseInt(name.charAt(0), 10))\n    }\n\n    _selectArray(properties) {\n        let hasValidMapping = properties.every((property) => {\n            return this._validatePropertyName(property);\n        });\n\n        if (!hasValidMapping) {\n            throw new Error(\"Invalid mapping: The mappings need to be a string that is at least one character long and doesn't start with a number.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n        let existingMapping = query.select;\n\n        properties.forEach((property) => {\n            existingMapping[property] = property;\n        });\n\n        return this.copy(query);\n    }\n\n    _selectObject(mapping) {\n        let mappingKeys = Object.keys(mapping);\n        let hasValidMapping = mappingKeys.every((key) => {\n            return this._validatePropertyName(key) && this._validatePropertyName(mapping[key]);\n        });\n\n        if (!hasValidMapping) {\n            throw new Error(\"Invalid mapping: The mappings need to be a string that is at least one character long and doesn't start with a number.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n        let existingMapping = query.select;\n\n        mappingKeys.forEach((key) => {\n            existingMapping[key] = mapping[key];\n        });\n\n        return this.copy(query);\n    }\n\n    and(lambda) {\n        return this._createQueryableFromLambda(\"and\", lambda);\n    }\n\n    copy(query) {\n        let queryable = new Queryable(this.type, query || this._copyQuery(this.query));\n        queryable.provider = this.provider;\n        return queryable;\n    }\n\n    countAsync() {\n        this._assertHasProvider(this);\n        return this.provider.countAsync(this);\n    }\n\n    getExpression() {\n        return this.query;\n    }\n\n    getQuery() {\n        return this.query;\n    }\n\n    merge(queryable) {\n        if (!(queryable instanceof Queryable)) {\n            throw new Error(\"Expected a queryable to be passed in.\");\n        }\n\n        let cloneQuery = this._copyQuery(this.getQuery());\n        let query = queryable.getQuery();\n\n        let rightExpression = query.where.children[0];\n\n        if (rightExpression != null) {\n            // No need to copy if there is nothing to copy.\n            if (cloneQuery.where.children.length === 0) {\n                cloneQuery.where.children.push(rightExpression.copy());\n            } else if (cloneQuery.where.children.length === 1 && cloneQuery.where.children[0].nodeName === \"and\") {\n                cloneQuery.where.children[0].children.push(rightExpression.copy());\n            } else {\n                let leftExpression = cloneQuery.where.children.pop();\n                let andExpression = new OperationExpression(\"and\");\n\n                andExpression.children.push(\n                    leftExpression,\n                    rightExpression.copy()\n                );\n\n                cloneQuery.where.children.push(andExpression);\n            }\n        }\n\n        Object.keys(query.select).forEach((key) => {\n            cloneQuery.select[key] = this._cloneObject(query.select[key]);\n        });\n\n        query.orderBy.forEach((orderBy) => {\n            let index = cloneQuery.orderBy.findIndex((cloneOrderBy) => {\n                return cloneOrderBy.column === orderBy.column;\n            });\n\n            if (index === -1) {\n                cloneQuery.orderBy.push(this._cloneObject(orderBy));\n            }\n        });\n\n        cloneQuery.type = query.type;\n        cloneQuery.take = query.take;\n        cloneQuery.skip = query.skip;\n\n        return this.copy(cloneQuery);\n    }\n\n    or(lambda) {\n        return this._createQueryableFromLambda(\"or\", lambda);\n    }\n\n    orderBy(property) {\n        if (typeof property !== \"string\") {\n            throw new Error(\"Illegal Argument: property needs to be of type string.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n\n        let index = query.orderBy.findIndex((orderBy) => {\n            return orderBy.column === property;\n        });\n\n        if (index === -1) {\n            query.orderBy.push({\n                type: \"ASC\",\n                column: property\n            });\n        }\n\n        return this.copy(query);\n    }\n\n    orderByDesc(property) {\n        if (typeof property !== \"string\") {\n            throw new Error(\"Illegal Argument: property needs to be of type string.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n\n        let index = query.orderBy.findIndex((orderBy) => {\n            return orderBy.column === property;\n        });\n\n        if (index === -1) {\n            query.orderBy.push({\n                type: \"DESC\",\n                column: property\n            });\n        }\n\n        return this.copy(query);\n    }\n\n    select(mapping) {\n        if (Array.isArray(mapping)) {\n            return this._selectArray(mapping)\n        } else {\n            return this._selectObject(mapping);\n        }\n    }\n\n    skip(value) {\n        if (typeof value !== \"number\") {\n            throw new Error(\"Illegal Argument: skip needs to be a number.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n        query.skip = value\n\n        return this.copy(query);\n    }\n\n    take(value) {\n        if (typeof value !== \"number\") {\n            throw new Error(\"Illegal Argument: take needs to be a number.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n        query.take = value\n\n        return this.copy(query);\n    }\n\n    toArrayAsync() {\n        this._assertHasProvider(this);\n        return this.provider.toArrayAsync(this);\n    }\n\n    toArrayWithCountAsync() {\n        this._assertHasProvider(this);\n        return this.provider.toArrayWithCountAsync(this);\n    }\n\n    toJson() {\n        return JSON.stringify(this.getQuery());\n    }\n\n    where(lambda) {\n        return this._createQueryableFromLambda(\"and\", lambda);\n    }\n\n    static fromJson(jsonQuery) {\n        let query = queryConverter.convert(jsonQuery);\n        return new Queryable(query.type, query);\n    }\n\n}\n"]}