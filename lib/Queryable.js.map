{"version":3,"sources":["../src/Queryable.js"],"names":["jsonQueryConverter","Queryable","type","query","provider","parameters","_applyQuery","where","nodeName","skip","take","Infinity","Array","isArray","orderBy","filter","_isValidOrderBy","_isValidMapping","select","Error","object","JSON","parse","stringify","copy","_cloneObject","lambda","_copyQuery","getQuery","whereExpression","children","length","rightExpression","leftExpression","pop","expression","push","mapping","Object","keys","every","key","column","name","isNaN","parseInt","charAt","properties","hasValidMapping","property","_validatePropertyName","existingMapping","forEach","mappingKeys","_createQueryableFromLambda","queryable","_assertHasProvider","countAsync","cloneQuery","andExpression","index","findIndex","cloneOrderBy","params","_selectArray","_selectObject","value","toArrayAsync","toArrayWithCountAsync","jsonQuery","convert","typeExpression","getMatchingNodes"],"mappings":"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","file":"Queryable.js","sourcesContent":["import Expression from \"./Expression\";\nimport ExpressionBuilder from \"./ExpressionBuilder\";\nimport OperationExpression from \"./OperationExpression\";\nimport OperationExpressionBuilder from \"./OperationExpressionBuilder\";\nimport ValueExpression from \"./ValueExpression\";\nimport JsonQueryConverter from \"./JsonQueryConverter\";\n\nconst jsonQueryConverter = new JsonQueryConverter();\n\nexport default class Queryable {\n    constructor(type, query = {}) {\n        this.type = type || \"Object\";\n        this.provider = null;\n        this.query = query;\n        this.query.parameters = (query && query.parameters) || {};\n        this._applyQuery(query);\n    }\n\n    _applyQuery(query) {\n        if (query.where != null && query.where.nodeName === \"where\") {\n            this.query.where = query.where;\n        } else {\n            this.query.where = new OperationExpression(\"where\");\n        }\n\n        if (typeof query.skip === \"number\") {\n            this.query.skip = query.skip;\n        } else {\n            this.query.skip = 0;\n        }\n\n        if (typeof query.take === \"number\") {\n            this.query.take = query.take;\n        } else {\n            this.query.take = Infinity;\n        }\n\n        if (Array.isArray(query.orderBy)) {\n            this.query.orderBy = query.orderBy.filter((orderBy) => {\n                return this._isValidOrderBy(orderBy);\n            });\n        } else {\n            this.query.orderBy = [];\n        }\n\n        if (this._isValidMapping(this.query.select)) {\n            this.query.select = query.select;\n        } else {\n            this.query.select = {};\n        }\n\n    }\n\n    _assertHasProvider() {\n        if (!this.provider) {\n            throw new Error(\"No provider found.\");\n        }\n    }\n\n    _cloneObject(object) {\n        return JSON.parse(JSON.stringify(object));\n    }\n\n    _copyQuery(query) {\n        let copy = {};\n\n        copy.where = query.where.copy();\n        copy.orderBy = this._cloneObject(query.orderBy);\n        copy.select = this._cloneObject(query.select);\n        copy.take = query.take;\n        copy.skip = query.skip;\n        copy.parameters = this._cloneObject(query.parameters);\n\n        return copy;\n    }\n\n    _createQueryableFromLambda(type, lambda = () => { }) {\n        let query = this._copyQuery(this.getQuery());\n        let whereExpression;\n\n        if (typeof lambda === \"function\") {\n            whereExpression = lambda(new ExpressionBuilder(this.type));\n        } else if (lambda instanceof Expression) {\n            whereExpression = lambda;\n        } else {\n            throw new Error(\"Invalid Argument: Expected an expression, or function.\");\n        }\n\n        if (!(whereExpression instanceof Expression)) {\n            throw new Error(\"Invalid expression: You may be missing a return.\");\n        }\n\n        if (query.where.children.length === 0) {\n            query.where = whereExpression;\n        } else {\n\n            let rightExpression = whereExpression.children[0];\n            let leftExpression = query.where.children.pop();\n            let expression = new OperationExpression(type);\n\n            expression.children.push(\n                leftExpression,\n                rightExpression\n            );\n\n            query.where.children.push(expression);\n        }\n\n        return this.copy(query);\n    }\n\n    _isValidMapping(mapping) {\n        if (mapping == null) {\n            return false;\n        }\n\n        return Object.keys(mapping).every((key) => {\n            return typeof key === \"string\" && typeof mapping[key] === \"string\";\n        });\n    }\n\n    _isValidOrderBy(orderBy) {\n        let keys = Object.keys(orderBy);\n\n        if (keys.length !== 2) {\n            return false;\n        }\n\n        if (orderBy.type !== \"ASC\" && orderBy.type !== \"DESC\") {\n            return false;\n        }\n\n        if (typeof orderBy.column !== \"string\") {\n            return false;\n        }\n\n        return true;\n    }\n\n    _validatePropertyName(name) {\n        return typeof name === \"string\" && name.length > 0 && isNaN(parseInt(name.charAt(0), 10))\n    }\n\n    _selectArray(properties) {\n        let hasValidMapping = properties.every((property) => {\n            return this._validatePropertyName(property);\n        });\n\n        if (!hasValidMapping) {\n            throw new Error(\"Invalid mapping: The mappings need to be a string that is at least one character long and doesn't start with a number.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n        let existingMapping = query.select;\n\n        properties.forEach((property) => {\n            existingMapping[property] = property;\n        });\n\n        return this.copy(query);\n    }\n\n    _selectObject(mapping) {\n        let mappingKeys = Object.keys(mapping);\n        let hasValidMapping = mappingKeys.every((key) => {\n            return this._validatePropertyName(key) && this._validatePropertyName(mapping[key]);\n        });\n\n        if (!hasValidMapping) {\n            throw new Error(\"Invalid mapping: The mappings need to be a string that is at least one character long and doesn't start with a number.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n        let existingMapping = query.select;\n\n        mappingKeys.forEach((key) => {\n            existingMapping[key] = mapping[key];\n        });\n\n        return this.copy(query);\n    }\n\n    and(lambda) {\n        return this._createQueryableFromLambda(\"and\", lambda);\n    }\n\n    copy(query) {\n        let queryable = new Queryable(this.type, query || this._copyQuery(this.query));\n        queryable.provider = this.provider;\n        return queryable;\n    }\n\n    countAsync() {\n        this._assertHasProvider(this);\n        return this.provider.countAsync(this);\n    }\n\n    getExpression() {\n        return this.query;\n    }\n\n    getQuery() {\n        return this.query;\n    }\n\n    merge(queryable) {\n        if (!(queryable instanceof Queryable)) {\n            throw new Error(\"Expected a queryable to be passed in.\");\n        }\n\n        let cloneQuery = this._copyQuery(this.getQuery());\n        let query = queryable.getQuery();\n\n        let rightExpression = query.where.children[0];\n\n        if (rightExpression != null) {\n            // No need to copy if there is nothing to copy.\n            if (cloneQuery.where.children.length === 0) {\n                cloneQuery.where.children.push(rightExpression.copy());\n            } else if (cloneQuery.where.children.length === 1 && cloneQuery.where.children[0].nodeName === \"and\") {\n                cloneQuery.where.children[0].children.push(rightExpression.copy());\n            } else {\n                let leftExpression = cloneQuery.where.children.pop();\n                let andExpression = new OperationExpression(\"and\");\n\n                andExpression.children.push(\n                    leftExpression,\n                    rightExpression.copy()\n                );\n\n                cloneQuery.where.children.push(andExpression);\n            }\n        }\n\n        Object.keys(query.select).forEach((key) => {\n            cloneQuery.select[key] = this._cloneObject(query.select[key]);\n        });\n\n        query.orderBy.forEach((orderBy) => {\n            let index = cloneQuery.orderBy.findIndex((cloneOrderBy) => {\n                return cloneOrderBy.column === orderBy.column;\n            });\n\n            if (index === -1) {\n                cloneQuery.orderBy.push(this._cloneObject(orderBy));\n            }\n        });\n\n        return this.copy(cloneQuery);\n    }\n\n    or(lambda) {\n        return this._createQueryableFromLambda(\"or\", lambda);\n    }\n\n    orderBy(property) {\n        if (typeof property !== \"string\") {\n            throw new Error(\"Illegal Argument: property needs to be of type string.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n\n        let index = query.orderBy.findIndex((orderBy) => {\n            return orderBy.column === property;\n        });\n\n        if (index === -1) {\n            query.orderBy.push({\n                type: \"ASC\",\n                column: property\n            });\n        }\n\n        return this.copy(query);\n    }\n\n    orderByDesc(property) {\n        if (typeof property !== \"string\") {\n            throw new Error(\"Illegal Argument: property needs to be of type string.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n\n        let index = query.orderBy.findIndex((orderBy) => {\n            return orderBy.column === property;\n        });\n\n        if (index === -1) {\n            query.orderBy.push({\n                type: \"DESC\",\n                column: property\n            });\n        }\n\n        return this.copy(query);\n    }\n\n    setParameters(params) {\n        if (params == null) {\n            throw new Error(\"Null Argument Exception.\");\n        }\n        let parameters = this.query.parameters;\n\n        Object.keys(params).forEach((key) => {\n            parameters[key] = params[key];\n        });\n        return this;\n    }\n\n    select(mapping) {\n        if (Array.isArray(mapping)) {\n            return this._selectArray(mapping)\n        } else {\n            return this._selectObject(mapping);\n        }\n    }\n\n    skip(value) {\n        if (typeof value !== \"number\") {\n            throw new Error(\"Illegal Argument: skip needs to be a number.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n        query.skip = value\n\n        return this.copy(query);\n    }\n\n    take(value) {\n        if (typeof value !== \"number\") {\n            throw new Error(\"Illegal Argument: take needs to be a number.\");\n        }\n\n        let query = this._copyQuery(this.getQuery());\n        query.take = value\n\n        return this.copy(query);\n    }\n\n    toArrayAsync() {\n        this._assertHasProvider(this);\n        return this.provider.toArrayAsync(this);\n    }\n\n    toArrayWithCountAsync() {\n        this._assertHasProvider(this);\n        return this.provider.toArrayWithCountAsync(this);\n    }\n\n    toJson() {\n        return JSON.stringify(this.getQuery());\n    }\n\n    where(lambda) {\n        return this._createQueryableFromLambda(\"and\", lambda);\n    }\n\n    withParameters(params) {\n        if (params == null) {\n            throw new Error(\"Null ArgumentException\");\n        }\n\n        let parameters = (this.query.parameters = {});\n        Object.keys(params).forEach((key) => {\n            parameters[key] = params[key];\n        });\n        return this;\n    }\n\n    static fromJson(jsonQuery) {\n        let query = jsonQueryConverter.convert(jsonQuery);\n        let typeExpression = query.where.getMatchingNodes(new ValueExpression(\"type\"));\n        let type = typeExpression && typeExpression.value || \"Object\";\n\n        return new Queryable(type, query);\n    }\n\n}\n"]}