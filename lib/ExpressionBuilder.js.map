{"version":3,"sources":["../src/ExpressionBuilder.js"],"names":["ExpressionBuilder","type","property","whereExpression","andExpression","children","Array","from","arguments","orExpression"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,iB;AACjB,+BAAYC,IAAZ,EAAkB;AAAA;;AACd,aAAKA,IAAL,GAAYA,QAAQ,QAApB;AACH;;;;iCAEQC,S,EAAU;AACf,gBAAIC,kBAAkB,kCAAwB,OAAxB,CAAtB;AACA,mBAAO,yCAA+B,KAAKF,IAApC,EAA0CC,SAA1C,EAAoDC,eAApD,CAAP;AACH;;;8BAEK;AACF,gBAAIC,gBAAgB,kCAAwB,KAAxB,CAApB;AACAA,0BAAcC,QAAd,GAAyBC,MAAMC,IAAN,CAAWC,SAAX,CAAzB;;AAEA,mBAAOJ,aAAP;AACH;;;6BAEI;AACD,gBAAIK,eAAe,kCAAwB,IAAxB,CAAnB;AACAA,yBAAaJ,QAAb,GAAwBC,MAAMC,IAAN,CAAWC,SAAX,CAAxB;;AAEA,mBAAOC,YAAP;AACH;;;gCAEO;AACJ,gBAAIN,kBAAkB,kCAAwB,OAAxB,CAAtB;AACA,mBAAO,yCAA+B,KAAKF,IAApC,EAA0C,IAA1C,EAAgDE,eAAhD,CAAP;AACH;;;;;;kBA3BgBH,iB","file":"ExpressionBuilder.js","sourcesContent":["import OperationExpressionBuilder from \"./OperationExpressionBuilder\";\nimport OperationExpression from \"./OperationExpression\";\n\nexport default class ExpressionBuilder {\n    constructor(type) {\n        this.type = type || \"Object\";\n    }\n\n    property(property) {\n        let whereExpression = new OperationExpression(\"where\");\n        return new OperationExpressionBuilder(this.type, property, whereExpression);\n    }\n\n    and() {\n        let andExpression = new OperationExpression(\"and\");\n        andExpression.children = Array.from(arguments);\n\n        return andExpression;\n    }\n\n    or() {\n        let orExpression = new OperationExpression(\"or\");\n        orExpression.children = Array.from(arguments);\n\n        return orExpression;\n    }\n\n    value() {\n        let whereExpression = new OperationExpression(\"where\");\n        return new OperationExpressionBuilder(this.type, null, whereExpression);\n    }\n}\n"]}