{"version":3,"sources":["../src/ExpressionBuilder.js"],"names":["returnExpression","expression","OperationExpressionBuilder","getLeftExpression","fn","expressionBuilder","ExpressionBuilder","any","propertyAccessExpression","Object","queryable","where","all","value","constant","getExpressionType","equalTo","notEqualTo","substringOf","array","Array","isArray","isIn","Error","isNotIn","greaterThan","greaterThanOrEqualTo","lessThanOrEqualTo","lessThan","endsWith","string","startsWith","propertyAccess","type","property","and","apply","arguments","or"],"mappings":"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","file":"ExpressionBuilder.js","sourcesContent":["import { Expression } from \"./Expression\";\n\nconst returnExpression = expression => {\n    return expression;\n};\n\nclass OperationExpressionBuilder {\n    constructor(getLeftExpression) {\n        this.getLeftExpression = getLeftExpression || returnExpression;\n    }\n\n    any(fn) {\n        var expressionBuilder = new ExpressionBuilder();\n        var expression = fn(expressionBuilder);\n        return Expression.any(this.getLeftExpression(), expression);\n    }\n\n    where(fn) {\n        var propertyAccessExpression = this.getLeftExpression();\n\n        this.getLeftExpression = () => {\n            var expressionBuilder = new ExpressionBuilder(Object);\n            var expression = fn(expressionBuilder);\n\n            return Expression.queryable(propertyAccessExpression, Expression.expression(Expression.where(expression)));\n        };\n\n        return this;\n    }\n\n    all(fn) {\n        var expressionBuilder = new ExpressionBuilder();\n        var expression = fn(expressionBuilder);\n        return Expression.all(this.getLeftExpression(), expression);\n    }\n\n    isEqualTo(value) {\n        var constant = Expression.getExpressionType(value);\n        return Expression.equalTo(this.getLeftExpression(), constant);\n    }\n\n    isNotEqualTo(value) {\n        var constant = Expression.getExpressionType(value);\n        return Expression.notEqualTo(this.getLeftExpression(), constant);\n    }\n\n    contains(value) {\n        var constant = Expression.getExpressionType(value);\n        return Expression.substringOf(this.getLeftExpression(), constant);\n    }\n\n    isIn(array) {\n        if (Array.isArray(array)) {\n            return Expression.isIn(this.getLeftExpression(), Expression.array(array));\n        } else {\n            throw new Error(\"isIn is expecting to be passed an array!\");\n        }\n    }\n\n    isNotIn(array) {\n        if (Array.isArray(array)) {\n            return Expression.isNotIn(this.getLeftExpression(), Expression.array(array));\n        } else {\n            throw new Error(\"isNotIn is expecting to be passed an array!\");\n        }\n    }\n\n    isGreaterThan(value) {\n        var constant = Expression.getExpressionType(value);\n        return Expression.greaterThan(this.getLeftExpression(), constant);\n    }\n\n    isGreaterThanOrEqualTo(value) {\n        var constant = Expression.getExpressionType(value);\n        return Expression.greaterThanOrEqualTo(this.getLeftExpression(), constant);\n    }\n\n    isLessThanOrEqualTo(value) {\n        var constant = Expression.getExpressionType(value);\n        return Expression.lessThanOrEqualTo(this.getLeftExpression(), constant);\n    }\n\n    isLessThan(value) {\n        var constant = Expression.getExpressionType(value);\n        return Expression.lessThan(this.getLeftExpression(), constant);\n    }\n\n    endsWith(value) {\n        return Expression.endsWith(this.getLeftExpression(), Expression.string(value));\n    }\n\n    startsWith(value) {\n        return Expression.startsWith(this.getLeftExpression(), Expression.string(value));\n    }\n\n    property(value) {\n        return new OperationExpressionBuilder(() => {\n            return Expression.propertyAccess(this.getLeftExpression(), value);\n        });\n    }\n\n    getExpression() {\n        return this.getLeftExpression();\n    }\n}\n\nclass ExpressionBuilder {\n    constructor(type) {\n        this.type = type || Object;\n    }\n\n    property(property) {\n        return new OperationExpressionBuilder(() => {\n            return Expression.propertyAccess(Expression.type(this.type), property);\n        });\n    }\n\n    and() {\n        return Expression.and.apply(Expression, arguments);\n    }\n\n    or() {\n        return Expression.or.apply(Expression, arguments);\n    }\n\n    value() {\n        return new OperationExpressionBuilder(() => {\n            return Expression.type(this.type);\n        });\n    }\n}\n\nexport { ExpressionBuilder, OperationExpressionBuilder };\n"]}