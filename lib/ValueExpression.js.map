{"version":3,"sources":["../src/ValueExpression.js"],"names":["ValueExpression","nodeName","value","node","isEqualTo"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,e;;;AACjB,6BAAYC,QAAZ,EAAsBC,KAAtB,EAA6B;AAAA;;AAAA;;AAEzB,cAAKA,KAAL,GAAaA,KAAb;AACA,cAAKD,QAAL,GAAgBA,QAAhB;AAHyB;AAI5B;;;;+BAEM;AACH,mBAAO,IAAID,eAAJ,CAAoB,KAAKC,QAAzB,EAAmC,KAAKC,KAAxC,CAAP;AACH;;;kCAESC,I,EAAM;AACZ,gBAAIA,QAAQ,KAAKF,QAAL,KAAkBE,KAAKF,QAA/B,IAA2C,KAAKC,KAAL,KAAeC,KAAKD,KAAnE,EAA0E;AACtE,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;iCAEQC,I,EAAM;AACX,mBAAO,KAAKC,SAAL,CAAeD,IAAf,CAAP;AACH;;;;;;kBApBgBH,e","file":"ValueExpression.js","sourcesContent":["import Expression from \"./Expression\";\n\nexport default class ValueExpression extends Expression {\n    constructor(nodeName, value) {\n        super();\n        this.value = value;\n        this.nodeName = nodeName;\n    }\n\n    copy() {\n        return new ValueExpression(this.nodeName, this.value);\n    }\n\n    isEqualTo(node) {\n        if (node && this.nodeName === node.nodeName && this.value === node.value) {\n            return true;\n        }\n        return false;\n    }\n\n    contains(node) {\n        return this.isEqualTo(node);\n    }\n}"]}