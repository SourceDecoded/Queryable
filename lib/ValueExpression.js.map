{"version":3,"sources":["../src/ValueExpression.js"],"names":["ValueExpression","nodeName","value","JSON","parse","stringify","node","isEqualTo"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,e;;;AACjB,6BAAYC,QAAZ,EAAsBC,KAAtB,EAA6B;AAAA;;AAAA;;AAEzB,cAAKA,KAAL,GAAaA,KAAb;AACA,cAAKD,QAAL,GAAgBA,QAAhB;AAHyB;AAI5B;;;;+BAEM;AACH,gBAAIC,QAAQ,KAAKA,KAAjB;;AAEA,gBAAI,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6BA,SAAS,IAA1C,EAAgD;AAC5CA,wBAAQC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeH,KAAf,CAAX,CAAR;AACH;;AAED,mBAAO,IAAIF,eAAJ,CAAoB,KAAKC,QAAzB,EAAmCC,KAAnC,CAAP;AACH;;;kCAESI,I,EAAM;AACZ,gBAAIA,QAAQ,KAAKL,QAAL,KAAkBK,KAAKL,QAA/B,IAA2C,KAAKC,KAAL,KAAeI,KAAKJ,KAAnE,EAA0E;AACtE,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;iCAEQI,I,EAAM;AACX,mBAAO,KAAKC,SAAL,CAAeD,IAAf,CAAP;AACH;;;;;;kBA1BgBN,e","file":"ValueExpression.js","sourcesContent":["import Expression from \"./Expression\";\n\nexport default class ValueExpression extends Expression {\n    constructor(nodeName, value) {\n        super();\n        this.value = value;\n        this.nodeName = nodeName;\n    }\n\n    copy() {\n        let value = this.value;\n\n        if (typeof value === \"object\" && value != null) {\n            value = JSON.parse(JSON.stringify(value));\n        }\n\n        return new ValueExpression(this.nodeName, value);\n    }\n\n    isEqualTo(node) {\n        if (node && this.nodeName === node.nodeName && this.value === node.value) {\n            return true;\n        }\n        return false;\n    }\n\n    contains(node) {\n        return this.isEqualTo(node);\n    }\n}"]}