{"version":3,"sources":["../src/JsonQueryConverter.js"],"names":["JsonQueryBuilder","node","type","valueExpression","nodeName","value","operationExpression","Array","isArray","children","Error","forEach","childNode","expression","_convertNode","push","json","object","JSON","parse","Object","keys","reduce","query","key"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,gB;;;;;;;qCACJC,I,EAAM;AAAA;;AACf,gBAAIA,QAAQ,IAAZ,EAAkB;AACd,uBAAOA,IAAP;AACH;;AAED,gBAAIA,KAAKC,IAAL,KAAc,OAAlB,EAA2B;AACvB,oBAAIC,kBAAkB,8BAAoBF,KAAKG,QAAzB,EAAmCH,KAAKI,KAAxC,CAAtB;AACA,uBAAOF,eAAP;AACH,aAHD,MAGO,IAAIF,KAAKC,IAAL,KAAc,WAAlB,EAA+B;AAClC,oBAAII,sBAAsB,kCAAwBL,KAAKG,QAA7B,CAA1B;;AAEA,oBAAI,CAACG,MAAMC,OAAN,CAAcP,KAAKQ,QAAnB,CAAL,EAAmC;AAC/B,0BAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;AACH;;AAEDT,qBAAKQ,QAAL,CAAcE,OAAd,CAAsB,UAACC,SAAD,EAAe;AACjC,wBAAIC,aAAa,MAAKC,YAAL,CAAkBF,SAAlB,CAAjB;AACAN,wCAAoBG,QAApB,CAA6BM,IAA7B,CAAkCF,UAAlC;AACH,iBAHD;;AAKA,uBAAOP,mBAAP;AACH,aAbM,MAaA,IAAIL,KAAKC,IAAL,IAAa,IAAjB,EAAuB;AAC1B,uBAAOD,IAAP;AACH;AACJ;;;gCAEOe,I,EAAM;AAAA;;AACV,gBAAIC,SAASC,KAAKC,KAAL,CAAWH,IAAX,CAAb;;AAEA,mBAAOI,OAAOC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,CAA2B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC9CD,sBAAMC,GAAN,IAAa,OAAKV,YAAL,CAAkBG,OAAOO,GAAP,CAAlB,CAAb;AACA,uBAAOD,KAAP;AACH,aAHM,EAGJ,EAHI,CAAP;AAKH;;;;;;kBAnCgBvB,gB","file":"JsonQueryConverter.js","sourcesContent":["import OperationExpression from \"./OperationExpression\";\nimport ValueExpression from \"./ValueExpression\";\n\nexport default class JsonQueryBuilder {\n    _convertNode(node) {\n        if (node == null) {\n            return node;\n        }\n\n        if (node.type === \"value\") {\n            let valueExpression = new ValueExpression(node.nodeName, node.value);\n            return valueExpression;\n        } else if (node.type === \"operation\") {\n            let operationExpression = new OperationExpression(node.nodeName);\n\n            if (!Array.isArray(node.children)) {\n                throw new Error(\"Invalid Operation Node. It didn't contain a children property of type array.\");\n            }\n\n            node.children.forEach((childNode) => {\n                let expression = this._convertNode(childNode);\n                operationExpression.children.push(expression);\n            });\n\n            return operationExpression;\n        } else if (node.type == null) {\n            return node;\n        }\n    }\n\n    convert(json) {\n        let object = JSON.parse(json);\n\n        return Object.keys(object).reduce((query, key) => {\n            query[key] = this._convertNode(object[key]);\n            return query;\n        }, {});\n\n    }\n}"]}